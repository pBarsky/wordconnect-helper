{"version":3,"sources":["workers/searchWorker.ts","forms/ErrorBox.tsx","utilities/ErrorMessages.ts","forms/QueryForm.tsx","components/Results.tsx","utilities/WordFinder.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","ErrorBox","message","visible","Transition","animation","duration","Message","negative","messages","en","query","required","onlyLetters","maxCount","minimum","lesserThanMin","minCount","greaterThanMax","pl","QueryForm","withFormik","mapPropsToValues","props","initialQuery","initialMaxCount","initialMinCount","unique","initialUnique","validate","values","errors","match","ErrorMessages","validateQuery","validateMinCount","validateMaxCount","handleSubmit","handleQuerySearch","clearResults","flagOutsideSubmitting","setSubmitting","touched","isSubmitting","style","maxWidth","FormGroup","widths","grouped","label","type","min","max","marginTop","disabled","Results","results","containerStyle","width","messageHeader","messageContent","isSearched","length","TransitionGroup","as","List","divided","size","map","result","Item","Header","Content","WordFinder","_letters","_maxCount","_minCount","_unique","this","split","RegExp","PrepareRegex","instance","worker","searchWords","res","forEach","letter","App","useState","setResults","setIsSubmitting","setIsSearched","handleResultsAdd","oldState","Container","display","flexDirection","justifyContent","alignItems","markCompletion","Search","then","words","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e49f7a7.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"searchWords\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"eac6f6e9fd1cd6bdd736.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import React from 'react'\nimport { Message, Transition } from 'semantic-ui-react'\n\ninterface Props {\n  message: string,\n  visible: boolean\n}\n\nconst ErrorBox = ({ message, visible }: Props) => {\n  return (\n    <Transition visible={visible} animation='fade down' duration={500}>\n      <Message negative>{message}</Message>\n    </Transition>\n  )\n}\n\nexport default ErrorBox\n","interface queryMessages {\n  required: string;\n  onlyLetters: string\n}\n\ninterface minCountMessages {\n  minimum: string;\n  greaterThanMax: string;\n}\n\ninterface maxCountMessages {\n  minimum: string;\n  lesserThanMin: string;\n\n}\n\ninterface IMessages {\n  query: queryMessages;\n  minCount: minCountMessages;\n  maxCount: maxCountMessages;\n}\n\nconst messages: Record<string, IMessages> = {\n  en: {\n    query: {\n      required: 'Required',\n      onlyLetters: 'Must contain only letters or space character'\n    },\n    maxCount: {\n      minimum: 'Maximum number of letters in a word must be at least 1.',\n      lesserThanMin: 'Maximum number of letters must greater or equal to minimum number of letters.'\n    },\n    minCount: {\n      minimum: 'Minimum number of letters in a word must be at least 1.',\n      greaterThanMax: 'Minimum number of letters must less or equal to maximum number of letters.'\n    }\n  },\n  pl: {\n    query: {\n      required: 'Wymagane',\n      onlyLetters: 'Musi zawierać wyłacznie litery lub znak spacji.'\n    },\n    maxCount: {\n      minimum: 'Maksymalna liczba liter musi być więszka lub równa 1.',\n      lesserThanMin: 'Maksymalna liczba liter musi być większa lub równa minimalnej liczbie liter.'\n    },\n    minCount: {\n      minimum: 'Minimalna liczba liter w słowie musi wynosić co najmniej 1.',\n      greaterThanMax: 'Minimalna liczba liter musi być mniejsza lub równa maksymalnej liczbie liter.'\n    }\n  }\n}\n\nexport default messages\n","import { FormikErrors, FormikProps, withFormik } from 'formik'\nimport { Checkbox, Form, Input, SubmitButton } from 'formik-semantic-ui-react'\nimport React from 'react'\nimport { QueryFormProps, QueryFormValues } from '../model/QueryForm'\nimport ErrorBox from './ErrorBox'\nimport { FormGroup } from 'semantic-ui-react'\nimport ErrorMessages from '../utilities/ErrorMessages'\n\nconst InnerForm = (props: FormikProps<QueryFormValues>) => {\n  const { touched, errors, isSubmitting, values: { minCount, maxCount } } = props\n  return (\n    <Form style={{ maxWidth: '400px' }}>\n      <FormGroup widths={'equal'} grouped>\n        <Input label=\"Litery\" type=\"text\" name=\"query\"/>\n        <Checkbox name='unique' label=\"Bez powtórzeń\"/>\n        <ErrorBox visible={!!errors.query && !!touched.query} message={errors.query ?? ''}/>\n      </FormGroup>\n      <FormGroup widths={'equal'}>\n        <Input label=\"Maks liczba liter\" type=\"number\" name=\"maxCount\" min={minCount}/>\n        <ErrorBox visible={!!errors.maxCount && !!touched.maxCount} message={errors.maxCount ?? ''}/>\n\n        <Input label=\"Min liczba liter\" type=\"number\" name=\"minCount\" min={1} max={maxCount}/>\n        <ErrorBox visible={!!errors.minCount && !!touched.minCount} message={errors.minCount ?? ''}/>\n      </FormGroup>\n      <SubmitButton style={{ marginTop: '20px' }} type=\"submit\" disabled={isSubmitting}>\n        Szukaj\n      </SubmitButton>\n    </Form>\n  )\n}\n\nfunction validateQuery ({ query }: QueryFormValues, errors: FormikErrors<QueryFormValues>) {\n  if (!query) {\n    errors.query = ErrorMessages.pl.query.required\n    return\n  }\n  if (!query.match(/^[a-zA-Z zżźćńółęąśŻŹĆĄŚĘŁÓŃ]+$/)) {\n    errors.query = ErrorMessages.pl.query.onlyLetters\n  }\n}\n\nfunction validateMinCount ({ minCount, maxCount }: QueryFormValues, errors: FormikErrors<QueryFormValues>) {\n  if (minCount < 1) {\n    errors.minCount = ErrorMessages.pl.minCount.minimum\n    return\n  }\n  if (minCount > maxCount) {\n    errors.minCount = ErrorMessages.pl.minCount.greaterThanMax\n  }\n}\n\nfunction validateMaxCount ({ maxCount, minCount }: QueryFormValues, errors: FormikErrors<QueryFormValues>) {\n  if (maxCount < 1) {\n    errors.minCount = ErrorMessages.pl.maxCount.minimum\n    return\n  }\n  if (minCount > maxCount) {\n    errors.minCount = ErrorMessages.pl.maxCount.lesserThanMin\n  }\n}\n\nconst validate = (values: QueryFormValues) => {\n  const errors: FormikErrors<QueryFormValues> = {}\n  validateQuery(values, errors)\n  validateMinCount(values, errors)\n  validateMaxCount(values, errors)\n  return errors\n}\n\nconst QueryForm = withFormik<QueryFormProps, QueryFormValues>({\n  mapPropsToValues: props => {\n    return {\n      query: props.initialQuery ?? '',\n      maxCount: props.initialMaxCount ?? 5,\n      minCount: props.initialMinCount ?? 1,\n      unique: props.initialUnique ?? true\n    }\n  },\n  validate: validate,\n  handleSubmit: (values, {\n    props: { handleQuerySearch, clearResults, setSubmitting: flagOutsideSubmitting }, setSubmitting\n  }) => {\n    clearResults()\n    flagOutsideSubmitting(true)\n    handleQuerySearch(values, () => setSubmitting(false))\n  }\n})(InnerForm)\n\nexport default QueryForm\n","import React from 'react'\nimport { List, Message, TransitionGroup } from 'semantic-ui-react'\n\ninterface Props {\n  results: string[],\n  isSubmitting: boolean,\n  isSearched: boolean\n}\n\nconst Results = ({ results, isSubmitting, isSearched }: Props) => {\n  const containerStyle = { width: '80vw', maxWidth: '500px' }\n\n  const messageHeader = isSubmitting ? 'Szukam...' : 'Nie znaleziono wyrazów spełniających podane parametry.'\n  const messageContent = isSubmitting ? '' : 'Spróbuj poszukać czegoś innego.'\n\n  if (!isSearched) {\n    return <Message>\n      Wpisz litery w formularzu powyżej, aby wyszukać wyrazy.\n    </Message>\n  }\n\n  return (\n    results.length > 0\n      ? <TransitionGroup as={List} duration={400} divided size='huge' style={containerStyle}>\n        {results.map(result => (\n          <List.Item key={result}>\n            {result}\n          </List.Item>\n        ))}\n      </TransitionGroup>\n      : <Message style={containerStyle}>\n        <Message.Header>{messageHeader}</Message.Header>\n        <Message.Content>{messageContent}</Message.Content>\n      </Message>\n  )\n}\n\nexport default Results\n","import { QueryFormValues } from '../model/QueryForm'\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport worker from 'workerize-loader!../workers/searchWorker'\n\nclass WordFinder {\n  private readonly _letters: string[];\n  private readonly _maxCount: number;\n  private readonly _minCount: number;\n  private readonly _unique: boolean;\n\n  constructor ({ maxCount, minCount, query, unique }: QueryFormValues) {\n    this._unique = unique\n    this._letters = query.split(' ')\n    this._maxCount = maxCount\n    this._minCount = minCount\n  }\n\n  public async Search (): Promise<string[] | undefined> {\n    const query = new RegExp(`^${this.PrepareRegex()}$`, 'i')\n    const instance = worker()\n    return await instance.searchWords(query)\n  }\n\n  private PrepareRegex (): string {\n    let res = `${this._unique ? '(?!.*(.).*\\\\1)' : ''}[`\n    this._letters.forEach(letter => {\n      res += `${letter}`\n    })\n    res += `]{${this._minCount},${this._maxCount}}`\n    return res\n  }\n}\n\nexport default WordFinder\n","import React, { useState } from 'react'\nimport { Container } from 'semantic-ui-react'\nimport QueryForm from './forms/QueryForm'\nimport Results from './components/Results'\nimport WordFinder from './utilities/WordFinder'\nimport { QueryFormValues } from './model/QueryForm'\n\nfunction App () {\n  const [results, setResults] = useState<string[]>([])\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [isSearched, setIsSearched] = useState(false)\n\n  const handleResultsAdd = (result: string) => {\n    setResults(oldState => [...oldState, result])\n  }\n\n  const handleQuerySearch = (values: QueryFormValues, markCompletion: () => void) => {\n    const wf = new WordFinder(values)\n    wf.Search().then(words => {\n      words?.forEach(handleResultsAdd)\n      markCompletion()\n      setIsSubmitting(false)\n    })\n  }\n\n  const handleResultsClear = () => {\n    setIsSearched(true)\n    setResults([])\n  }\n\n  return (\n    <Container style={{\n      marginTop: '5vh',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }}>\n      <QueryForm handleQuerySearch={handleQuerySearch} initialMinCount={3} initialMaxCount={7}\n                 clearResults={handleResultsClear} setSubmitting={setIsSubmitting}/>\n      <Results results={results} isSubmitting={isSubmitting} isSearched={isSearched}/>\n    </Container>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}