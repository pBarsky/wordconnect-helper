{"version":3,"sources":["forms/ErrorBox.tsx","utilities/ErrorMessages.ts","forms/QueryForm.tsx","components/Results.tsx","utilities/WordFinder.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ErrorBox","message","visible","Transition","animation","duration","Message","negative","messages","en","query","required","onlyLetters","maxCount","minimum","lesserThanMin","minCount","greaterThanMax","pl","QueryForm","withFormik","mapPropsToValues","props","initialQuery","initialMaxCount","initialMinCount","unique","initialUnique","validate","values","errors","match","ErrorMessages","validateQuery","validateMinCount","validateMaxCount","handleSubmit","handleQuerySearch","clearResults","setSubmitting","touched","isSubmitting","style","maxWidth","FormGroup","widths","grouped","label","type","name","min","max","marginTop","disabled","Results","results","containerStyle","width","length","TransitionGroup","as","List","divided","size","map","result","Item","Header","Content","WordFinder","addResult","_letters","_maxCount","_minCount","_unique","_addResult","this","split","RegExp","PrepareRegex","window","POLISH_WORDS","forEach","word","res","letter","App","useState","setResults","handleResultsAdd","oldState","Container","display","flexDirection","justifyContent","alignItems","Search","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89d74b97.chunk.js","sourcesContent":["import React from 'react'\nimport { Message, Transition } from 'semantic-ui-react'\n\ninterface Props {\n  message: string,\n  visible: boolean\n}\n\nconst ErrorBox = ({ message, visible }: Props) => {\n  return (\n    <Transition visible={visible} animation='fade down' duration={500}>\n      <Message negative>{message}</Message>\n    </Transition>\n  )\n}\n\nexport default ErrorBox\n","interface queryMessages {\n  required: string;\n  onlyLetters: string\n}\n\ninterface minCountMessages {\n  minimum: string;\n  greaterThanMax: string;\n}\n\ninterface maxCountMessages {\n  minimum: string;\n  lesserThanMin: string;\n\n}\n\ninterface IMessages {\n  query: queryMessages;\n  minCount: minCountMessages;\n  maxCount: maxCountMessages;\n}\n\nconst messages: Record<string, IMessages> = {\n  en: {\n    query: {\n      required: 'Required',\n      onlyLetters: 'Must contain only letters or space character'\n    },\n    maxCount: {\n      minimum: 'Maximum number of letters in a word must be at least 1.',\n      lesserThanMin: 'Maximum number of letters must greater or equal to minimum number of letters.'\n    },\n    minCount: {\n      minimum: 'Minimum number of letters in a word must be at least 1.',\n      greaterThanMax: 'Minimum number of letters must less or equal to maximum number of letters.'\n    }\n  },\n  pl: {\n    query: {\n      required: 'Wymagane',\n      onlyLetters: 'Musi zawierać wyłacznie litery lub znak spacji.'\n    },\n    maxCount: {\n      minimum: 'Maksymalna liczba liter musi być więszka lub równa 1.',\n      lesserThanMin: 'Maksymalna liczba liter musi być większa lub równa minimalnej liczbie liter.'\n    },\n    minCount: {\n      minimum: 'Minimalna liczba liter w słowie musi wynosić co najmniej 1.',\n      greaterThanMax: 'Minimalna liczba liter musi być mniejsza lub równa maksymalnej liczbie liter.'\n    }\n  }\n}\n\nexport default messages\n","import { FormikErrors, FormikProps, withFormik } from 'formik'\nimport { Checkbox, Form, Input, SubmitButton } from 'formik-semantic-ui-react'\nimport React from 'react'\nimport { QueryFormProps, QueryFormValues } from '../model/QueryForm'\nimport ErrorBox from './ErrorBox'\nimport { FormGroup } from 'semantic-ui-react'\nimport ErrorMessages from '../utilities/ErrorMessages'\n\n// TODO: Add validation for numbers\n// TODO: Change the way errors are presented\n\nconst InnerForm = (props: FormikProps<QueryFormValues>) => {\n  const { touched, errors, isSubmitting, values: { minCount, maxCount } } = props\n  return (\n    <Form style={{ maxWidth: '400px' }}>\n      <FormGroup widths={'equal'} grouped>\n        <Input label=\"Litery\" type=\"text\" name=\"query\"/>\n        <Checkbox name='unique' label=\"Bez powtórzeń\"/>\n        <ErrorBox visible={!!errors.query && !!touched.query} message={errors.query ?? ''}/>\n      </FormGroup>\n      <FormGroup widths={'equal'}>\n        <Input label=\"Maks liczba liter\" type=\"number\" name=\"maxCount\" min={minCount}/>\n        <ErrorBox visible={!!errors.maxCount && !!touched.maxCount} message={errors.maxCount ?? ''}/>\n\n        <Input label=\"Min liczba liter\" type=\"number\" name=\"minCount\" min={1} max={maxCount}/>\n        <ErrorBox visible={!!errors.minCount && !!touched.minCount} message={errors.minCount ?? ''}/>\n      </FormGroup>\n      <SubmitButton style={{ marginTop: '20px' }} type=\"submit\" disabled={isSubmitting}>\n        Szukaj\n      </SubmitButton>\n    </Form>\n  )\n}\n\nfunction validateQuery ({ query }: QueryFormValues, errors: FormikErrors<QueryFormValues>) {\n  if (!query) {\n    errors.query = ErrorMessages.pl.query.required\n    return\n  }\n  if (!query.match(/^[a-zA-Z zżźćńółęąśŻŹĆĄŚĘŁÓŃ]+$/)) {\n    errors.query = ErrorMessages.pl.query.onlyLetters\n  }\n}\n\nfunction validateMinCount ({ minCount, maxCount }: QueryFormValues, errors: FormikErrors<QueryFormValues>) {\n  if (minCount < 1) {\n    errors.minCount = ErrorMessages.pl.minCount.minimum\n    return\n  }\n  if (minCount > maxCount) {\n    errors.minCount = ErrorMessages.pl.minCount.greaterThanMax\n  }\n}\n\nfunction validateMaxCount ({ maxCount, minCount }: QueryFormValues, errors: FormikErrors<QueryFormValues>) {\n  if (maxCount < 1) {\n    errors.minCount = ErrorMessages.pl.maxCount.minimum\n    return\n  }\n  if (minCount > maxCount) {\n    errors.minCount = ErrorMessages.pl.maxCount.lesserThanMin\n  }\n}\n\nconst validate = (values: QueryFormValues) => {\n  const errors: FormikErrors<QueryFormValues> = {}\n  validateQuery(values, errors)\n  validateMinCount(values, errors)\n  validateMaxCount(values, errors)\n  return errors\n}\n\nconst QueryForm = withFormik<QueryFormProps, QueryFormValues>({\n  mapPropsToValues: props => {\n    return {\n      query: props.initialQuery ?? '',\n      maxCount: props.initialMaxCount ?? 5,\n      minCount: props.initialMinCount ?? 1,\n      unique: props.initialUnique ?? true\n    }\n  },\n  validate: validate,\n  handleSubmit: (values, { props: { handleQuerySearch, clearResults }, setSubmitting }) => {\n    clearResults()\n    handleQuerySearch(values)\n    setSubmitting(false)\n  }\n})(InnerForm)\n\nexport default QueryForm\n","import React from 'react'\nimport { List, Message, TransitionGroup } from 'semantic-ui-react'\n\ninterface Props {\n  results: string[]\n}\n\nconst Results = ({ results }: Props) => {\n  const containerStyle = { width: '80vw', maxWidth: '500px' }\n\n  return (\n    results.length > 0\n      ? <TransitionGroup as={List} duration={400} divided size='huge' style={containerStyle}>\n        {results.map(result => (\n          <List.Item key={result}>\n            {result}\n          </List.Item>\n        ))}\n      </TransitionGroup>\n      : <Message style={containerStyle}>\n        <Message.Header>No results to show.</Message.Header>\n        <Message.Content>Please search for something else.</Message.Content>\n      </Message>\n  )\n}\n\nexport default Results\n","import { QueryFormValues } from '../model/QueryForm'\n\ninterface Props {\n  addResult(res: string): void\n}\n\nclass WordFinder {\n  private readonly _letters: string[];\n  private readonly _maxCount: number;\n  private readonly _minCount: number;\n  private readonly _unique: boolean;\n  private _addResult: (res: string) => void;\n\n  constructor ({ maxCount, minCount, query, unique }: QueryFormValues, { addResult }: Props) {\n    this._unique = unique\n    this._addResult = addResult\n    this._letters = query.split(' ')\n    this._maxCount = maxCount\n    this._minCount = minCount\n  }\n\n  public Search (): void {\n    const query = new RegExp(`^${this.PrepareRegex()}$`, 'i')\n    // @ts-ignore\n    window.POLISH_WORDS.forEach(word => {\n      if (word.match(query)) {\n        this._addResult(word)\n      }\n    })\n  }\n\n  private PrepareRegex (): string {\n    let res = `${this._unique ? '(?!.*(.).*\\\\1)' : ''}[`\n    this._letters.forEach(letter => {\n      res += `${letter}`\n    })\n    res += `]{${this._minCount},${this._maxCount}}`\n    return res\n  }\n}\n\nexport default WordFinder\n","import React, { useState } from 'react'\nimport { Container } from 'semantic-ui-react'\nimport QueryForm from './forms/QueryForm'\nimport Results from './components/Results'\nimport WordFinder from './utilities/WordFinder'\nimport { QueryFormValues } from './model/QueryForm'\n\nfunction App () {\n  const [results, setResults] = useState<string[]>([])\n\n  const handleResultsAdd = (result: string) => {\n    setResults(oldState => [...oldState, result])\n  }\n\n  const handleQuerySearch = (values: QueryFormValues) => {\n    const wf = new WordFinder(values, { addResult: handleResultsAdd })\n    wf.Search()\n  }\n\n  const handleResultsClear = () => {\n    setResults([])\n  }\n\n  return (\n    <Container style={{\n      marginTop: '5vh',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }}>\n      <QueryForm handleQuerySearch={handleQuerySearch} initialMinCount={3} initialMaxCount={7}\n                 clearResults={handleResultsClear}/>\n      <Results results={results}/>\n    </Container>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}