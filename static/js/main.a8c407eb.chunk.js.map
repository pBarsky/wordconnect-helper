{"version":3,"sources":["forms/queryForm/QueryForm.module.scss","workers/searchWorker.ts","app/App.module.scss","utilities/pluralWordHelper.ts","components/Results/NoResultsFound.tsx","components/Results/ResultList.tsx","components/Results/Results.tsx","utilities/ErrorMessages.ts","utilities/Validators.ts","components/errors/ErrorBox.tsx","forms/queryForm/InnerForm.tsx","forms/queryForm/QueryForm.tsx","utilities/WordFinder.ts","app/App.tsx","reportWebVitals.ts","index.tsx","components/Results/Results.module.scss"],"names":["module","exports","addMethods","methods","w","Worker","name","getWordSuffix","number","hundreds","includes","NoResultsFound","Message","className","cssClasses","message","join","Header","Content","ResultList","resultElements","results","map","result","List","Item","TransitionGroup","as","duration","animation","divided","size","Results","isSubmitting","isSearched","segment","Dimmer","active","inverted","Loader","length","Segment","memo","messages","en","query","required","onlyLetters","maxCount","minimum","lesserThanMin","minCount","greaterThanMax","pl","ErrorBox","visible","Transition","negative","InnerForm","props","touched","errors","values","QueryForm","FormGroup","grouped","label","type","widths","fluid","min","max","color","style","marginTop","disabled","withFormik","mapPropsToValues","initialQuery","initialMaxCount","initialMinCount","unique","initialUnique","validate","match","ErrorMessages","validateQuery","validateMinCount","validateMaxCount","handleSubmit","handleQuerySearch","clearResults","flagOutsideSubmitting","setSubmitting","WordFinder","_letters","_maxCount","_minCount","_unique","this","split","RegExp","PrepareRegex","instance","worker","word","lastIndex","searchWords","res","forEach","letter","App","useState","setResults","setIsSubmitting","setIsSearched","handleResultsAdd","oldState","markCompletion","a","wf","SearchGenerator","Container","container","content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8c407eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"QueryForm\":\"QueryForm_QueryForm__1nDVg\"};","\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"searchWords\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"53f6051d6d419ca02484.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__MiK3W\"};","\nexport function getWordSuffix (number: number): string {\n  const hundreds = number % 100\n  const singles = number % 10\n  if (number === 1) {\n    return ''\n  }\n  if (hundreds >= 10 && hundreds <= 20) {\n    return 'ów'\n  }\n  if ([2, 3, 4].includes(singles) && (hundreds > 20 || hundreds < 10)) {\n    return 'y'\n  }\n  return 'ów'\n}\n","import { Message } from 'semantic-ui-react'\nimport cssClasses from './Results.module.scss'\n\nconst NoResultsFound = () => {\n  return <Message className={[cssClasses.message].join(' ')}>\n    <Message.Header>Nie znaleziono wyrazów spełniających podane parametry.</Message.Header>\n    <Message.Content>Spróbuj poszukać czegoś innego.</Message.Content>\n  </Message>\n}\n\nexport default NoResultsFound\n","import { List, TransitionGroup } from 'semantic-ui-react'\n\ninterface Props {\n  results: string[]\n}\n\nconst ResultList = ({ results }: Props) => {\n  const resultElements = results.map(result => (\n    <List.Item key={result}>\n      {result}\n    </List.Item>\n  ))\n\n  return (\n    <TransitionGroup as={List} duration={600} animation={'fade left'} divided size='huge'>\n      {resultElements}\n    </TransitionGroup>\n  )\n}\n\nexport default ResultList\n","import { memo } from 'react'\nimport { Dimmer, Header, Loader, Message, Segment } from 'semantic-ui-react'\nimport { getWordSuffix } from '../../utilities/pluralWordHelper'\nimport NoResultsFound from './NoResultsFound'\nimport ResultList from './ResultList'\nimport cssClasses from './Results.module.scss'\n\ninterface Props {\n  results: string[];\n  isSubmitting: boolean;\n  isSearched: boolean;\n}\n\nconst Results = ({ results, isSubmitting, isSearched }: Props) => {\n  if (!isSearched) {\n    return (\n      <Segment className={cssClasses.results}>\n        <strong>Wpisz litery w formularzu powyżej, aby wyszukać wyrazy.</strong>\n      </Segment>\n    )\n  }\n\n  if (isSubmitting) {\n    return (\n      <Message className={cssClasses.segment}>\n        <Dimmer active inverted>\n          <Loader>Szukam...</Loader>\n        </Dimmer>\n      </Message>\n    )\n  }\n\n  return (\n    <div className={cssClasses.results}>\n      <Header size='medium'>\n        Znalazłem {results.length} wyraz{getWordSuffix(results.length)}.\n      </Header>\n      <ResultList results={results} />\n      {results.length <= 0 && <NoResultsFound />}\n    </div>\n  )\n}\n\nexport default memo(Results)\n","interface queryMessages {\n  required: string;\n  onlyLetters: string\n}\n\ninterface minCountMessages {\n  minimum: string;\n  greaterThanMax: string;\n}\n\ninterface maxCountMessages {\n  minimum: string;\n  lesserThanMin: string;\n\n}\n\ninterface IMessages {\n  query: queryMessages;\n  minCount: minCountMessages;\n  maxCount: maxCountMessages;\n}\n\nconst messages: Record<string, IMessages> = {\n  en: {\n    query: {\n      required: 'Required',\n      onlyLetters: 'Must contain only letters or space character'\n    },\n    maxCount: {\n      minimum: 'Maximum number of letters in a word must be at least 1.',\n      lesserThanMin: 'Maximum number of letters must greater or equal to minimum number of letters.'\n    },\n    minCount: {\n      minimum: 'Minimum number of letters in a word must be at least 1.',\n      greaterThanMax: 'Minimum number of letters must less or equal to maximum number of letters.'\n    }\n  },\n  pl: {\n    query: {\n      required: 'Wymagane',\n      onlyLetters: 'Musi zawierać wyłacznie litery lub znak spacji.'\n    },\n    maxCount: {\n      minimum: 'Maksymalna liczba liter musi być więszka lub równa 1.',\n      lesserThanMin: 'Maksymalna liczba liter musi być większa lub równa minimalnej liczbie liter.'\n    },\n    minCount: {\n      minimum: 'Minimalna liczba liter w słowie musi wynosić co najmniej 1.',\n      greaterThanMax: 'Minimalna liczba liter musi być mniejsza lub równa maksymalnej liczbie liter.'\n    }\n  }\n}\n\nexport default messages\n","import { QueryFormValues } from '../model/QueryForm'\nimport { FormikErrors } from 'formik'\nimport ErrorMessages from './ErrorMessages'\n\nfunction validateQuery ({ query }: QueryFormValues, errors: FormikErrors<QueryFormValues>) {\n  if (!query) {\n    errors.query = ErrorMessages.pl.query.required\n    return\n  }\n  if (!query.match(/^[a-zA-Z zżźćńółęąśŻŹĆĄŚĘŁÓŃ]+$/)) {\n    errors.query = ErrorMessages.pl.query.onlyLetters\n  }\n}\n\nfunction validateMinCount ({ minCount, maxCount }: QueryFormValues, errors: FormikErrors<QueryFormValues>) {\n  if (minCount < 1) {\n    errors.minCount = ErrorMessages.pl.minCount.minimum\n    return\n  }\n  if (minCount > maxCount) {\n    errors.minCount = ErrorMessages.pl.minCount.greaterThanMax\n  }\n}\n\nfunction validateMaxCount ({ maxCount, minCount }: QueryFormValues, errors: FormikErrors<QueryFormValues>) {\n  if (maxCount < 1) {\n    errors.minCount = ErrorMessages.pl.maxCount.minimum\n    return\n  }\n  if (minCount > maxCount) {\n    errors.minCount = ErrorMessages.pl.maxCount.lesserThanMin\n  }\n}\n\nexport const validateQueryForm = (values: QueryFormValues) => {\n  const errors: FormikErrors<QueryFormValues> = {}\n  validateQuery(values, errors)\n  validateMinCount(values, errors)\n  validateMaxCount(values, errors)\n  return errors\n}\n","import { memo } from 'react'\nimport { Message, Transition } from 'semantic-ui-react'\n\ninterface Props {\n  message: string;\n  visible: boolean;\n}\n\nconst ErrorBox = ({ message, visible }: Props) => {\n  return (\n    <Transition visible={visible} animation='fade down' duration={500}>\n      <Message negative>{message}</Message>\n    </Transition>\n  )\n}\n\nexport default memo(ErrorBox)\n","import { FormikProps } from 'formik'\nimport { Checkbox, Form, Input, SubmitButton } from 'formik-semantic-ui-react'\nimport { memo } from 'react'\nimport { FormGroup } from 'semantic-ui-react'\nimport ErrorBox from '../../components/errors/ErrorBox'\nimport { QueryFormValues } from '../../model/QueryForm'\nimport cssClasses from './QueryForm.module.scss'\n\nconst InnerForm = (props: FormikProps<QueryFormValues>) => {\n  const {\n    touched,\n    errors,\n    isSubmitting,\n    values: { minCount, maxCount }\n  } = props\n  return (\n    <Form className={cssClasses.QueryForm}>\n      <FormGroup grouped>\n        <Input label='Litery' type='text' name='query' />\n        <ErrorBox\n          visible={!!errors.query && !!touched.query}\n          message={errors.query ?? ''}\n        />\n        <Checkbox name='unique' label='Bez powtórzeń' />\n      </FormGroup>\n      <FormGroup widths={'equal'}>\n        <Input\n          fluid\n          label='Maks liczba liter'\n          type='number'\n          name='maxCount'\n          min={minCount}\n        />\n        <ErrorBox\n          visible={!!errors.maxCount && !!touched.maxCount}\n          message={errors.maxCount ?? ''}\n        />\n\n        <Input\n          label='Min liczba liter'\n          type='number'\n          name='minCount'\n          fluid\n          min={1}\n          max={maxCount}\n        />\n        <ErrorBox\n          visible={!!errors.minCount && !!touched.minCount}\n          message={errors.minCount ?? ''}\n        />\n      </FormGroup>\n      <SubmitButton\n        color='black'\n        style={{ marginTop: '20px' }}\n        type='submit'\n        disabled={isSubmitting}\n      >\n        Szukaj\n      </SubmitButton>\n    </Form>\n  )\n}\n\nexport default memo(InnerForm)\n","import { withFormik } from 'formik'\nimport { QueryFormProps, QueryFormValues } from '../../model/QueryForm'\nimport { validateQueryForm } from '../../utilities/Validators'\nimport InnerForm from './InnerForm'\nimport { memo } from 'react'\n\nconst QueryForm = withFormik<QueryFormProps, QueryFormValues>({\n  mapPropsToValues: props => {\n    return {\n      query: props.initialQuery ?? '',\n      maxCount: props.initialMaxCount ?? 5,\n      minCount: props.initialMinCount ?? 1,\n      unique: props.initialUnique ?? true\n    }\n  },\n  validate: validateQueryForm,\n  handleSubmit: (values, {\n    props: { handleQuerySearch, clearResults, setSubmitting: flagOutsideSubmitting }, setSubmitting\n  }) => {\n    clearResults()\n    flagOutsideSubmitting(true)\n    handleQuerySearch(values, () => setSubmitting(false))\n  }\n})(InnerForm)\n\nexport default memo(QueryForm)\n","import { QueryFormValues } from '../model/QueryForm'\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport worker from 'workerize-loader!../workers/searchWorker'\n\nclass WordFinder {\n  private readonly _letters: string[];\n  private readonly _maxCount: number;\n  private readonly _minCount: number;\n  private readonly _unique: boolean;\n\n  constructor ({ maxCount, minCount, query, unique }: QueryFormValues) {\n    this._unique = unique\n    this._letters = query.split(' ')\n    this._maxCount = maxCount\n    this._minCount = minCount\n  }\n\n  public async * SearchGenerator (): AsyncGenerator<string | undefined> {\n    const query = new RegExp(`^${this.PrepareRegex()}$`, 'i')\n    const instance = worker()\n    let word = ''\n    let lastIndex: number = 0\n    while (lastIndex !== -1) {\n      [word, lastIndex] = await instance.searchWords(query, lastIndex)\n      yield word\n    }\n  }\n\n  private PrepareRegex (): string {\n    let res = `${this._unique ? '(?!.*(.).*\\\\1)' : ''}[`\n    this._letters.forEach(letter => {\n      res += `${letter}`\n    })\n    res += `]{${this._minCount},${this._maxCount}}`\n    return res\n  }\n}\n\nexport default WordFinder\n","import { useState } from 'react'\nimport { Container, Header } from 'semantic-ui-react'\nimport Results from '../components/Results/Results'\nimport QueryForm from '../forms/queryForm/QueryForm'\nimport { QueryFormValues } from '../model/QueryForm'\nimport WordFinder from '../utilities/WordFinder'\nimport style from './App.module.scss'\n\nfunction App () {\n  const [results, setResults] = useState<string[]>([])\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [isSearched, setIsSearched] = useState(false)\n\n  const handleResultsAdd = (result: string) => {\n    setResults((oldState) => [...oldState, result])\n  }\n\n  const handleQuerySearch = async (\n    values: QueryFormValues,\n    markCompletion: () => void\n  ) => {\n    const wf = new WordFinder(values)\n    for await (const word of wf.SearchGenerator()) {\n      setIsSubmitting(false)\n      if (word) {\n        handleResultsAdd(word)\n      }\n    }\n    markCompletion()\n  }\n\n  const handleResultsClear = () => {\n    setIsSearched(true)\n    setResults([])\n  }\n\n  return (\n    <Container className={style.container}>\n      <Header content='WordConnect Helper' size={'huge'} />\n      <QueryForm\n        handleQuerySearch={handleQuerySearch}\n        initialMinCount={3}\n        initialMaxCount={7}\n        clearResults={handleResultsClear}\n        setSubmitting={setIsSubmitting}\n      />\n      <Results\n        results={results}\n        isSubmitting={isSubmitting}\n        isSearched={isSearched}\n      />\n    </Container>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import ReactDOM from 'react-dom'\nimport './index.scss'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './app/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"Results_results__24xMo\",\"message\":\"Results_message__aOygJ\",\"noShadow\":\"Results_noShadow__tErkd\"};"],"sourceRoot":""}